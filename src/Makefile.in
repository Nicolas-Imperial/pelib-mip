# Copyright 2015 Nicolas Melot
#
# This file is part of pelib.
#
# pelib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pelib is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pelib. If not, see <http://www.gnu.org/licenses/>.
#

attach = 

subdirs = 

## C global parameters
CFLAGS_BASE =  
CFLAGS_PRIVATE = -I../include 
CFLAGS_CONFIG_RELEASE = -O3 -DNDEBUG
CFLAGS_CONFIG_DEBUG = -g -O0 -DDEBUG=1
CFLAGS_SHARED = 
CC_PKG = 
CC_DEPS =
CC_LIBS = 
CC_LDFLAGS =
CC_TEST_PKG = unit
CC_TEST_LIBS = $(CC_LIBS) -lrt
CC_TEST_DEPS =$(CC_DEPS)
CC_TEST_LDFLAGS =

## C++ global parameters
CXXFLAGS_BASE = 
CXXFLAGS_PRIVATE = -I../include -Wall
CXXFLAGS_CONFIG_RELEASE = -O3 -DNDEBUG
CXXFLAGS_CONFIG_DEBUG = -g -O0 -DDEBUG=1
CXXFLAGS_SHARED = 
CXX_PKG = 
CXX_DEPS =
CXX_LIBS = 
CXX_LDFLAGS =
CXX_TEST_PKG = unit
CXX_TEST_LIBS = $(CXX_LIBS) -lrt
CXX_TEST_DEPS = $(CXX_DEPS)
CXX_TEST_LDFLAGS =

## Enable shared and static libraries
CORE++_STATIC = 0
CORE++_SHARED = 1
corepp_extra = 

CORE_STATIC = 1
CORE_SHARED = 1
core_extra = 

## Packages source files
corepp_src = AlgebraData.cpp Algebra.cpp \
Scalar.cpp Vector.cpp Matrix.cpp Set.cpp \
AlgebraParser.cpp SOLParser.cpp AlgebraOutput.cpp \
AlgebraDataParser.cpp AlgebraDataOutput.cpp \
AmplDataParser.cpp AmplDataOutput.cpp \
AmplInputData.cpp \
AmplInputScalar.cpp AmplInputVector.cpp AmplInputSet.cpp AmplInputMatrix.cpp AmplInputSet.cpp \
AmplInput.cpp \
AmplOutputData.cpp \
AmplOutputScalar.cpp AmplOutputVector.cpp AmplOutputMatrix.cpp AmplOutputSet.cpp \
AmplOutput.cpp \
RawOutputData.cpp \
RawOutputScalar.cpp RawOutputVector.cpp RawOutputMatrix.cpp RawOutputSet.cpp \
AlgebraRawOutput.cpp \
CppDataOutput.cpp \
CppData.cpp CppScalar.cpp CppVector.cpp CppMatrix.cpp CppSet.cpp \
Cpp.cpp \
Solver.cpp \
AmplSolver.cpp \
MixedIntegerModel.cpp \
ModelParser.cpp ModelOutput.cpp \
MixedIntegerModelParser.cpp \
MathProgModelParser.cpp \
CPLEXLP.cpp \
MixedIntegerProblem.cpp \
MIPSolver.cpp \
MIPOutput.cpp \
Gurobi.cpp \

## executables
bincxx_project = run_record demo
bincxx_package = $(if $(filter 1,$(CORE++_SHARED) $(CORE++_STATIC)),$(bincxx_project))

bincxx_demo_src = demo.cpp
bin_demo_export = $(bincxx_demo_embed) $(bincxx_demo_src) 
bin_demo_deps = libpelib-mip.so.$(version).$(minor).$(release)
bin_demo_libs = -lpelib-mip
bin_demo_pkg = pelib-core++
bin_demo_ldflags = -L.
bin_demo_static = 0

bincxx_run_record_src = run_record.cpp
bin_run_record_export = $(bincxx_run_record_embed) $(bincxx_run_record_src) make_algebra.cpp
bin_run_record_deps = libpelib-mip.so.$(version).$(minor).$(release)
bin_run_record_libs = -lpelib-mip 
bin_run_record_pkg = pelib-core++
bin_run_record_ldflags = -L.
bin_run_record_static = 0

## dynamic library packages and their sources
corepp = pelib-mip pelib-ampl_input pelib-ampl_output pelib-solve pelib-ampl pelib-raw
sharedcxx_package = $(if $(filter 1,$(CORE++_SHARED)),$(corepp))

sharedcxx_pelib-ampl_output_src = ampl_output.cpp
shared_pelib-ampl_output_export = $(sharedcxx_pelib-ampl_output_embed) $(sharedcxx_pelib-ampl_output_src)
shared_pelib-ampl_output_libs = -lpelib-mip
shared_pelib-ampl_output_ldflags = -L.
shared_pelib-ampl_output_deps = libpelib-mip.so
shared_pelib-ampl_output_pkg_requires = pelib-mip pelib-core++
shared_pelib-ampl_output_pkg_url = http://www.ida.liu.se/~nicme26
shared_pelib-ampl_output_pkg_ld =
shared_pelib-ampl_output_pkg_libs =
shared_pelib-ampl_output_cxxflags = -fPIC
shared_pelib-ampl_output_pkg_description = Platform parser and output in AMPL input format
shared_pelib-ampl_output_embed =

sharedcxx_pelib-ampl_input_src = ampl_input.cpp
shared_pelib-ampl_input_export = $(sharedcxx_pelib-ampl_input_embed) $(sharedcxx_pelib-ampl_input_src)
shared_pelib-ampl_input_libs = -lpelib-mip
shared_pelib-ampl_input_ldflags = -L.
shared_pelib-ampl_input_deps = libpelib-mip.so
shared_pelib-ampl_input_pkg_requires = pelib-mip
shared_pelib-ampl_input_pkg_url = http://www.ida.liu.se/~nicme26
shared_pelib-ampl_input_pkg_ld =
shared_pelib-ampl_input_pkg_libs =
shared_pelib-ampl_input_cxxflags = -fPIC
shared_pelib-ampl_input_pkg_description = Platform parser and input in AMPL input format
shared_pelib-ampl_input_embed =

sharedcxx_pelib-mip_src = $(corepp_src)
shared_pelib-mip_export = $(sharedcxx_pelib-mip_embed) $(sharedcxx_pelib-mip_src)
shared_pelib-mip_libs = 
shared_pelib-mip_ldflags = 
shared_pelib-mip_deps = 
shared_pelib-mip_pkg = pelib-core++
shared_pelib-mip_pkg_url = http://www.ida.liu.se/~nicme26
shared_pelib-mip_pkg_ld =
shared_pelib-mip_pkg_libs =
shared_pelib-mip_cxxflags = -fPIC
shared_pelib-mip_pkg_description = Platform parser and output in AMPL input format
shared_pelib-mip_embed =

sharedcxx_pelib-solve_src = solve.cpp
shared_pelib-solve_export = $(sharedcxx_pelib-solve_embed) $(sharedcxx_pelib-solve_src)
shared_pelib-solve_libs = -lpelib-mip
shared_pelib-solve_ldflags = -L.
shared_pelib-solve_deps = libpelib-mip.so 
shared_pelib-solve_pkg = pelib-core++
shared_pelib-solve_pkg_url = http://www.ida.liu.se/~nicme26
shared_pelib-solve_pkg_ld =
shared_pelib-solve_pkg_libs =
shared_pelib-solve_cxxflags = -fPIC
shared_pelib-solve_pkg_description = Platform parser and output in AMPL input format
shared_pelib-solve_embed =

sharedcxx_pelib-ampl_src = ampl.cpp
shared_pelib-ampl_export = $(sharedcxx_pelib-ampl_embed) $(sharedcxx_pelib-ampl_src)
shared_pelib-ampl_libs = -lpelib-mip
shared_pelib-ampl_ldflags = -L.
shared_pelib-ampl_deps = libpelib-mip.so
shared_pelib-ampl_pkg = pelib-core++
shared_pelib-ampl_pkg_url = http://www.ida.liu.se/~nicme26
shared_pelib-ampl_pkg_ld =
shared_pelib-ampl_pkg_libs =
shared_pelib-ampl_cxxflags = -fPIC
shared_pelib-ampl_pkg_description = Platform parser and output in AMPL input format
shared_pelib-ampl_embed =
 
sharedcxx_pelib-raw_src = raw.cpp
shared_pelib-raw_export = $(sharedcxx_pelib-raw_embed) $(sharedcxx_pelib-raw_src)
shared_pelib-raw_libs = -lpelib-mip
shared_pelib-raw_ldflags = -L.
shared_pelib-raw_deps = libpelib-mip.so
shared_pelib-raw_pkg = pelib-core++
shared_pelib-raw_pkg_url = http://www.ida.liu.se/~nicme26
shared_pelib-raw_pkg_ld =
shared_pelib-raw_pkg_libs =
shared_pelib-raw_cxxflags = -fPIC
shared_pelib-raw_pkg_description = Platform parser and output in AMPL input format
shared_pelib-raw_embed =

## static library packages and their sources
lib_package = 

## test packages and their sources 
testcxx_package = 
testcc_package = 

post-install: do-post-install dist

do-post-install:

## Uncomment this to run target "first" before any target explicetly called
#FIRST = first

first:
	@# Display some basic variable content here and call "make all"
	@echo $(embed_object)
	@echo $(call embed,$(sharedcxx_package),shared)
	@echo $(call embed,$(call suffixin,pelib,$(sharedcxx_package)),shared)
	@echo $(patsubst %.so.$(version).$(minor).$(release),%,libpelib.so.3.0.0)
	@echo $(call embed,$(call suffixin,$(patsubst %.so.$(version).$(minor).$(release),%,libpelib.so.3.0.0),$(sharedcxx_package)),shared)
	@/bin/false

